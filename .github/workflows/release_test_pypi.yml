name: Publish to Test PyPI

on:
  # manually trigger the workflow
  workflow_dispatch:

permissions: {}

jobs:
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.get_tag.outputs.TAG }}
    permissions:
      # for uploading artifacts
      actions: write

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: >-
          python3 -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: python-package-distributions
          path: dist/
      - name: Get Tag Name
        id: get_tag
        run: |
          pip install .
          TAG=$(python -c "from telegram import __version__; print(f'v{__version__}')")
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

  publish-to-test-pypi:
    name: Publish to Test PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: release_test_pypi
      url: https://test.pypi.org/p/python-telegram-bot
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      actions: read  # for downloading artifacts

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          repository-url: https://test.pypi.org/legacy/

  compute-signatures:
    name: Compute SHA1 Sums and Sign with Sigstore
    runs-on: ubuntu-latest
    needs:
      - publish-to-test-pypi

    permissions:
      id-token: write  # IMPORTANT: mandatory for sigstore
      actions: write  # for up/downloading artifacts

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: python-package-distributions
          path: dist/
      - name: Compute SHA1 Sums
        run: |
          # Compute SHA1 sum of the distribution packages and save it to a file with the same name,
          # but with .sha1 extension
          for file in dist/*; do
              sha1sum $file > $file.sha1
          done
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@f832326173235dcb00dd5d92cd3f353de3188e6c # v3.1.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Store the distribution packages and signatures
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: python-package-distributions-and-signatures
          path: dist/

  github-test-release:
    name: Upload to GitHub Release Draft
    needs:
      - build
      - compute-signatures

    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      actions: read  # for downloading artifacts

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Download all the dists
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: python-package-distributions-and-signatures
          path: dist/
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ needs.build.outputs.TAG }}
        # Create a tag and a GitHub Release *draft*. The description is filled by the static
        # template, we just insert the correct tag in the template.
        run: >-
          sed "s/{tag}/$TAG/g" .github/workflows/assets/release_template.html |
          gh release create
          "$TAG"
          --repo '${{ github.repository }}'
          --draft
          --notes-file -
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ needs.build.outputs.TAG }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          "$TAG" dist/**
          --repo '${{ github.repository }}'
